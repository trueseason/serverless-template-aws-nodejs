# serverless.yml
# You can pin your service to only deploy with a specific Serverless version
frameworkVersion: '2'

service: SampleApi123
# app and org for use with dashboard.serverless.com
#app: your-app-name
#org: your-org-name

provider:
  name: aws
  runtime: nodejs12.x
  lambdaHashingVersion: 20201221
  stage: ${opt:stage, 'dev'}
  region: ${opt:region, 'ap-southeast-2'}
  stackName: ${self:service} # Overwrite default CloudFormation stack name. Default is ${self:service}-${opt:stage, self:provider.stage, 'dev'}
  # apiName: ${self:service} # Overwrite default REST API Gateway name. Default is ${opt:stage, self:provider.stage, 'dev'}-${self:service}
  httpApi:
    name: ${self:service} # Overwrite default Http API Gateway name. Default is ${opt:stage, self:provider.stage, 'dev'}-${self:service}
  profile: ${opt:profile, 'Development'} # The default profile to use with this service
  memorySize: 128 # Overwrite the default memory size. Default is 1024
  timeout: 10 # optional, in seconds, default is 6
  deploymentBucket:
    name: my-newtest-bucket # Overwrite the default deployment bucket
    serverSideEncryption: AES256 # when using server-side encryption
    # tags: # Tags that will be added to each of the deployment resources
    #   key1: value1
    #   key2: value2
  deploymentPrefix: ${self:service}-artifacts # Overwrite the default S3 prefix under which deployed artifacts should be stored. Default is serverless
  versionFunctions: true # Optional function versioning
#   stackTags: # Optional CF stack tags
#     key: value
#   stackPolicy: # Optional CF stack policy. The example below allows updates to all resources except deleting/replacing EC2 instances (use with caution!)
#     - Effect: Allow
#       Principal: '*'
#       Action: 'Update:*'
#       Resource: '*'
#     - Effect: Deny
#       Principal: '*'
#       Action:
#         - Update:Replace
#         - Update:Delete
#       Resource: '*'
#       Condition:
#         StringEquals:
#           ResourceType:
#             - AWS::EC2::Instance
#   iam:
#     role: myDefaultRole                                                  # must validly reference a role defined in the service
#     role: arn:aws:iam::0123456789:role//my/default/path/roleInMyAccount  # must validly reference a role defined in your account
#     role:                                                                # must validly resolve to the ARN of a role you have the rights to use
#       Fn::GetAtt:
#         - myRole
#         - Arn
#     role: !Sub arn:aws:iam::${AWS::AccountId}:role/roleInMyAccount
# # you can add statements to the Lambda function's IAM Role here
#   iamRoleStatements:
#     - Effect: "Allow"
#       Action:
#         - "s3:ListBucket"
#       Resource: { "Fn::Join" : ["", ["arn:aws:s3:::", { "Ref" : "ServerlessDeploymentBucket" } ] ]  }
#     - Effect: "Allow"
#       Action:
#         - "s3:PutObject"
#       Resource:
#         Fn::Join:
#           - ""
#           - - "arn:aws:s3:::"
#             - "Ref" : "ServerlessDeploymentBucket"
#             - "/*"
#     - Effect: Allow
#       Action: # Gives permission to DynamoDB tables in a specific region
#         - dynamodb:DescribeTable
#         - dynamodb:Query
#         - dynamodb:Scan
#         - dynamodb:GetItem
#         - dynamodb:PutItem
#         - dynamodb:UpdateItem
#         - dynamodb:DeleteItem
#       Resource: 'arn:aws:dynamodb:us-east-1:*:*'
#   vpc:
#     securityGroupIds:
#       - securityGroupId1
#       - securityGroupId2
#     subnetIds:
#       - subnetId1
#       - subnetId2

# # you can define service wide environment variables here
#   environment:
#     variable1: value1
#   logs:
#     httpApi: true

# you can add packaging information here
#package:
#  patterns:
#    - '!exclude-me.js'
#    - '!exclude-me-dir/**'
#    - include-me.js
#    - include-me-dir/**

functions:
  sampleFunction123:
    handler: lib/handler.processEvent
    name: sampleFunction123 # optional, Deployed Lambda name
    # description: sample Function 123 # optional, Lambda function description
    # runtime: nodejs12.x # optional overwrite, default is provider runtime
    # memorySize: 128 # optional, in MB, default is 1024
    # timeout: 10 # optional, in seconds, default is 6
    provisionedConcurrency: 3 # optional, Count of provisioned lambda instances
    reservedConcurrency: 5 # optional, reserved concurrency limit for this function. By default, AWS uses account concurrency limit
    tracing: PassThrough # optional, overwrite, can be 'Active' or 'PassThrough'
#    The following are a few example events you can configure
#    NOTE: Please make sure to change your handler code to work with those events
#    Check the event documentation for details
    events:
      - httpApi: '*'
      # - httpApi:
          # path: /path1/path2
          # method: post
#      - websocket: $connect
#      - s3: ${env:BUCKET}
#      - schedule: rate(10 minutes)
#      - sns: greeter-topic
#      - stream: arn:aws:dynamodb:region:XXXXXX:table/foo/stream/1970-01-01T00:00:00.000
#      - alexaSkill: amzn1.ask.skill.xx-xx-xx-xx
#      - alexaSmartHome: amzn1.ask.skill.xx-xx-xx-xx
#      - iot:
#          sql: "SELECT * FROM 'some_topic'"
#      - cloudwatchEvent:
#          event:
#            source:
#              - "aws.ec2"
#            detail-type:
#              - "EC2 Instance State-change Notification"
#            detail:
#              state:
#                - pending
#      - cloudwatchLog: '/aws/lambda/hello'
#      - cognitoUserPool:
#          pool: MyUserPool
#          trigger: PreSignUp
#      - alb:
#          listenerArn: arn:aws:elasticloadbalancing:us-east-1:XXXXXX:listener/app/my-load-balancer/50dc6c495c0c9188/
#          priority: 1
#          conditions:
#            host: example.com
#            path: /hello

#    Define function environment variables here
#    environment:
#      variable2: value2

# you can add CloudFormation resource templates here
#resources:
#  Resources:
#    NewResource:
#      Type: AWS::S3::Bucket
#      Properties:
#        BucketName: my-new-bucket
#  Outputs:
#     NewOutput:
#       Description: "Description for the output"
#       Value: "Some output value"
package:
  patterns:
    - '!.*/**'
    - '!.*'
    - '!src/**'
    - '!test/**'
    - '!**/*.ts'
    - '!**/*.js.map'
    - '!tsconfig.json'
    - '!package-lock.json'
    - src/function/sample.js